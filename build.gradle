plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.weatheretl'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.postgresql:postgresql'
    implementation 'com.opencsv:opencsv:5.8'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
}

test {
    useJUnitPlatform()

    maxParallelForks = 1
    forkEvery = 0

    maxHeapSize = "1g"
    minHeapSize = "256m"

    jvmArgs = [
            '-Djava.awt.headless=true',
            '-Dspring.profiles.active=test'
    ]

    timeout = Duration.ofMinutes(5)

    testLogging {
        events "failed", "skipped"
        exceptionFormat = "short"
        showStandardStreams = false
        showExceptions = true
        showCauses = true
    }

    jacoco {
        enabled = true
    }
}

jacocoTestReport {
    enabled = true
}

jacocoTestCoverageVerification {
    enabled = true
}

task Test(type: Test) {
    useJUnitPlatform()

    include '**/util/**'
    include '**/service/*Test.class'
    include '**/integration/**'
    include '**/*IntegrationTest*'

    maxHeapSize = "512m"
    maxParallelForks = 1
    forkEvery = 0

    jvmArgs = ['-Djava.awt.headless=true']

    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = true
        exceptionFormat = "short"
    }

    timeout = Duration.ofMinutes(2)
}